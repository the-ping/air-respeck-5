package com.specknet.airrespeck;

import com.specknet.airrespeck.services.SpeckBluetoothService;

import org.junit.Test;
import static org.junit.Assert.assertTrue;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;

/**
 * Class for verifying that the breathing signal generated by the C code stays the same
 * Created by Darius
 */

public class BreathingSignalTest {

    private static final String directory = "C:/Users/Darius/Dropbox/Studium/ArbeitArvind/Work/Other analysis/";

    @Test
    public void breathingSignal_SpeckBluetoothService() {
        ArrayList<Float[]> accelValues = loadAccelValues();
        SpeckBluetoothService service = new SpeckBluetoothService();
        service.initBreathing();

        ArrayList<Float> breathingSignal = new ArrayList<>();
        for (Float[] accelVector : accelValues) {
            service.updateBreathing(accelVector[0], accelVector[1], accelVector[2]);
            breathingSignal.add(service.getBreathingSignal());
        }

        // Compare to previously stored breathing signal to check whether its the same
        String comparisonFileName = directory + "example_breathing.csv";
        ArrayList<Float> comparisonBreathingSignal = loadBreathingSignal(comparisonFileName);
        assertTrue(breathingSignal.equals(comparisonBreathingSignal));
    }

    // Load sample acceleration data
    private static ArrayList<Float[]> loadAccelValues() {
        String filename = directory + "example_all.csv";
        File accelFile = new File(filename);

        ArrayList<Float[]> accelValues = new ArrayList<>();
        try {
            BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(accelFile)));
            // Skip header
            in.readLine();

            String line;
            while ((line = in.readLine()) != null) {
                String[] allCoeffs = line.split(",");
                Float[] accelVector = new Float[]{Float.parseFloat(allCoeffs[2]),
                        Float.parseFloat(allCoeffs[3]), Float.parseFloat(allCoeffs[4])};
                accelValues.add(accelVector);
            }
            in.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return accelValues;
    }

    private static void saveBreathingSignal(String filename, ArrayList<Float> breathingSignal) {
        File file = new File(filename);

        try {
            BufferedWriter out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file)));
            for (float val : breathingSignal) {
                out.write(Float.toString(val) + "\n");
            }

            out.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static ArrayList<Float> loadBreathingSignal(String filename) {
        File accelFile = new File(filename);

        ArrayList<Float> breathingSignal = new ArrayList<>();
        try {
            BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(accelFile)));

            String line;
            while ((line = in.readLine()) != null) {
                breathingSignal.add(Float.parseFloat(line));
            }
            in.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return breathingSignal;
    }
}


