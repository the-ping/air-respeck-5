These instructions are needed to test the jni C code on Windows, without having to start the app. This is helpful when the code is refactored or changed, so
that afterwards we can make sure that the output of the C code remains the same.
This is also helpful for generating a breathing signal based on an input acceleration signal, which can be used to analyse files recorded for previous studies where
the breathing signal hasn't been stored.

The general idea is to execute the "BreathingSignalTest", while linking it to the respeck-jni library. On linux, this can probably be done by providing a path to the .so files
generated by gradle (haven't tested this). On Windows, we have to create a .dll library before being able to use the library. This library has to be recreated each time
a change was made to the C code.

First, we open the path where the respeck-jni.c file is located. For convenience, I also store the Windows .dll there:

> cd C:/[...]/AirRespeck/app/src/main/jni

After that, we create the library with the following command. This is the command for 64 bit systems and the paths have to be modified to fit the system.
Note that the library won't work if there's a link to the android logging library, probably because that will be connected to other Android code. Therefore, 
all logging references have to be commented out before runnning this.

> gcc -Wall -Wl,--export-all-symbols -Wl,--add-stdcall-alias -m64 -D_JNI_IMPLEMENTATION_ -Wl,--kill-at -I"C:/Program Files/Java/jdk1.8.0_66/include" -I"C:/Program Files/Java/jdk1.8.0_66/include/win32" -shared respeck-jni.c breathing/* activityclassification/* -o respeck-jni.dll

After the library has been created, we need to configure the running of the test to load the created library into the PATH:
"Edit configurations" from running menu for BreathingSignalTest. At "VM options", add the following line:
-Djava.library.path=C:\[...]\AirRespeck\app\src\main\jni

Now the test should be executable.